#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{algorithm,algpseudocode}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
RequestManager
\end_layout

\begin_layout Subsubsection
addRequest(Request)
\end_layout

\begin_layout Standard
addRequest(Request request)
\end_layout

\begin_layout Standard
for(i=0;i<requests.size();i++)
\end_layout

\begin_layout Standard
if(request.startTime.isPrevious(requests.get(i).startTime)
\end_layout

\begin_layout Standard
requests.add(request, i)
\end_layout

\begin_layout Standard
endFor
\end_layout

\begin_layout Standard
Path possiblePath := GoogleMaps.getPath(request.start, request.destination)
\end_layout

\begin_layout Standard
forall(Request r : requests)
\end_layout

\begin_layout Standard
Path rPath := GoogleMaps.getPath(r.start, r.destination)
\end_layout

\begin_layout Standard
if((possiblePath.contains(r.start) && possiblePath.contains(r.destination))
\end_layout

\begin_layout Standard
|| (possiblePath.contains(r.start) && rPath.contains(request.destination))
\end_layout

\begin_layout Standard
|| (rPath.contains(request.start) && rPath.contains(request.destination))
\end_layout

\begin_layout Standard
|| (rPath.contains(request.start) && possiblePath.contains(r.destination)))
\end_layout

\begin_layout Standard
request.merge(r)
\end_layout

\begin_layout Subsubsection

\series bold
modifyRequest(Request, Request)
\end_layout

\begin_layout Standard
modifyRequest(Request request, Request newRequest)
\end_layout

\begin_layout Standard
if(requests.contains(request)) 
\end_layout

\begin_layout Standard
requests.remove(request)
\end_layout

\begin_layout Standard
else 
\end_layout

\begin_layout Standard
forall(Request r : requests)
\end_layout

\begin_layout Standard
if(r.containsRequest(request))
\end_layout

\begin_layout Standard
r.extractRequest(request)
\end_layout

\begin_layout Standard
endElse
\end_layout

\begin_layout Standard
addRequest(newRequest)
\end_layout

\begin_layout Subsubsection

\series bold
requestIsReadyNotification()
\end_layout

\begin_layout Standard
requestIsReadyNotification()
\end_layout

\begin_layout Standard
while(!requests.isEmpty())
\end_layout

\begin_layout Standard
if(requests.get(0).startTime > getTime() -10)
\end_layout

\begin_layout Standard
RideManager.onReadyRequest(requests.remove(0))
\end_layout

\begin_layout Standard
endWhile
\end_layout

\begin_layout Subsection
RideManager
\end_layout

\begin_layout Subsubsection

\series bold
onReadyRequest(Request)
\end_layout

\begin_layout Standard
onReadyRequest(Request request)
\end_layout

\begin_layout Standard
TaxiDriver taxiDriver:= QueueManager.getTaxiDriver(request.start, request.numOfPass
enger)
\end_layout

\begin_layout Standard
if(taxiDriver is not null)
\end_layout

\begin_layout Standard
createRide(request, taxiDriver)
\end_layout

\begin_layout Standard
else
\end_layout

\begin_layout Standard
onReadyRequest(request.splitLeft())
\end_layout

\begin_layout Standard
onReadyRequest(request.splitRight())
\end_layout

\begin_layout Subsubsection

\series bold
onProblem(TaxiDriver)
\end_layout

\begin_layout Standard
onProblem(TaxiDriver taxiDriver)
\end_layout

\begin_layout Standard
forall(Ride r : rides)
\end_layout

\begin_layout Standard
if(r.getDriver = taxiDriver)
\end_layout

\begin_layout Standard
rides.remove(r)
\end_layout

\begin_layout Standard
onReadyRequest(r.getRequest())
\end_layout

\begin_layout Standard
break
\end_layout

\begin_layout Standard
endIf
\end_layout

\begin_layout Standard
endFor
\end_layout

\begin_layout Subsection
QueueManager
\end_layout

\begin_layout Subsubsection

\series bold
getQueue(int ID)
\end_layout

\begin_layout Standard
getQueue(int ID)
\end_layout

\begin_layout Standard
forall(Queue q : queues)
\end_layout

\begin_layout Standard
if(q.getID() = ID) return q
\end_layout

\begin_layout Subsubsection

\series bold
getQueue(Position)
\end_layout

\begin_layout Standard
getQueue(Position position)
\end_layout

\begin_layout Standard
return getQueue(MapUtils.getIDfromPosition(position))
\end_layout

\begin_layout Subsubsection

\series bold
getTaxiDriver(Position, int seats)
\end_layout

\begin_layout Standard
getTaxiDriver(Position position, int seats)
\end_layout

\begin_layout Standard
Queue queue := getQueue(position)
\end_layout

\begin_layout Standard
TaxiDriver taxiDriver := queue.getFirst(seats)
\end_layout

\begin_layout Standard
if(taxiDriver is not null) return taxiDriver
\end_layout

\begin_layout Standard
else
\end_layout

\begin_layout Standard
forall(Queue q : MapUtils.getNeighbor(position))
\end_layout

\begin_layout Standard
taxiDriver := q.getFirst(seats)
\end_layout

\begin_layout Standard
if(taxiDriver is not null) return taxiDriver
\end_layout

\begin_layout Standard
endFor
\end_layout

\begin_layout Standard
endElse
\end_layout

\begin_layout Standard
return NoTaxiDriverAvailableException
\end_layout

\end_body
\end_document
