#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
RequestManager
\end_layout

\begin_layout Standard
The RequestManger provides all the method to manage the incoming requests
 and them dispatch.
\end_layout

\begin_layout Itemize

\series bold
addRequest(Request)
\series default
: insert the Request in the correct position wrt the starting hour, analize
 the shared requests into the list and using GoogleMaps API checks for compatibl
e paths and tries to merge them.
\end_layout

\begin_layout Itemize

\series bold
modifyRequest(Request, Position destination, Position start, int passengers)
\series default
: if the request was merged then extract the required request, otherwise
 delete the request.
 After that with 
\series bold
addRequest(Request)
\series default
 insert the edited request.
\end_layout

\begin_layout Itemize

\series bold
requestIsReadyNotification()
\series default
: every 10 seconds check the first request in the list if is ready and then
 notifies to the RideManager to create a Ride.
\end_layout

\begin_layout Subsection
RideManager
\end_layout

\begin_layout Standard
The RideManager manage the pending Rides and Taxi problem report.
\end_layout

\begin_layout Itemize

\series bold
onReadyRequest(Request)
\series default
: asks to the QueueManager a available TaxiDriver with a proper Car, if
 there is an available Taxi create a Ride with 
\series bold
createRide(Request, TaxiDriver)
\series default
, otherwise and the Request is a merged Request using a divide et impera
 strategy try to create as few as possible number of Rides to satisfies
 all the requests.
\end_layout

\begin_layout Itemize

\series bold
onProblem(TaxiDriver)
\series default
: firstly gets the Ride associated to the TaxiDriver, extract the Request
 and then use the 
\series bold
onReadyRequest(Request)
\series default
.
\end_layout

\begin_layout Subsection
QueueManager
\end_layout

\begin_layout Standard
The QueueManager manage the zones of the city managing them like a Queue.
\end_layout

\begin_layout Itemize

\series bold
getQueue(int ID)
\series default
: using a for clicle get the Queue with the desired ID.
\end_layout

\begin_layout Itemize

\series bold
getQueue(Position)
\series default
: using the MapUtils gets the id of the Queue and return it with 
\series bold
getQueue(int ID)
\end_layout

\begin_layout Itemize

\series bold
getTaxiDriver(Position, int seats)
\series default
: gets the Queue using 
\series bold
getQueue(Position)
\series default
, if the queue has a suitable TaxiDriver (with a proper car) then return
 the TaxiDriver, otherwise using the MapUtils gets the neighbor Queues and
 retry to get a suitable TaxiDriver for each Queue, if no TaxiDriver is
 found return an Exception.
\end_layout

\begin_layout Itemize

\series bold
requestToTaxi(TaxiDriver)
\series default
: send a request to the TaxiDriver and waits 30sec for a reply, if the reply
 is negative then remove the TaxiDriver from the queue and push it back
 to the list and return false, otherwise return true.
\end_layout

\begin_layout Itemize

\series bold
addNewTaxiDriver(TaxiDriver, Position)
\series default
: gets the Queue using 
\series bold
getQueue(Position) 
\series default
and using 
\series bold
push(TaxiDriver)
\series default
 insert back to the list the TaxiDriver.
\end_layout

\end_body
\end_document
