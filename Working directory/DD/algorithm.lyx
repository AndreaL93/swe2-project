#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Request manager
\end_layout

\begin_layout Standard
The Request manger provides all the methods to manage and dispatch the incoming
 requests.
\end_layout

\begin_layout Itemize

\series bold
addRequest(Request)
\series default
: inserts the given Request in the correct position w.r.t.
 the starting hour, analyzes the 
\shape italic
shared ride
\shape default
 requests into the list and, using the GoogleMaps API, checks for compatible
 paths and tries to merge them.
\end_layout

\begin_layout Itemize

\series bold
modifyRequest(Request, Position destination, Position start, int passengers)
\series default
: if the request was merged in a single 
\shape italic
shared ride
\shape default
 request, then splits the two and deletes the relevant request; after that
 inserts the edited request in the queue, with 
\series bold
addRequest(Request)
\series default
.
\end_layout

\begin_layout Itemize

\series bold
requestIsReadyNotification()
\series default
: checks every 10 seconds whether the first request in the list must be
 dispatched, and possibly notifies to the Ride manager to create a Ride.
\end_layout

\begin_layout Subsection
Ride manager
\end_layout

\begin_layout Standard
The Ride manager manages the pending Rides and Taxi problem reports.
\end_layout

\begin_layout Itemize

\series bold
onReadyRequest(Request)
\series default
: asks to the Queue manager an available TaxiDriver with a suitable Car
 (based on the relevant request); if an available Taxi exists, creates a
 Ride with 
\series bold
createRide(Request, TaxiDriver)
\series default
, otherwise:
\end_layout

\begin_deeper
\begin_layout Itemize
if the request is a 
\shape italic
shared ride
\shape default
 request composed by different requests, tries to split the ride into as
 few smaller rides as possible.
 
\end_layout

\begin_layout Itemize
if the request is a normal request, start an error procedure and notify
 the delay to the user via the Notification manager
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
onProblem(TaxiDriver)
\series default
: terminates the TaxiDriver's active ride, generate a new Request to match
 the customer's original request and then uses the 
\series bold
onReadyRequest(Request)
\series default
 to find a new taxi.
\end_layout

\begin_layout Subsection
Queue manager
\end_layout

\begin_layout Standard
The QueueManager manage the zones of the city managing them like a Queue.
\end_layout

\begin_layout Itemize

\series bold
getTaxiDriver(Position, int seats)
\series default
: 
\end_layout

\begin_deeper
\begin_layout Itemize
Looks for the first available taxi driver, with a car with a capacity greater
 or equal to the given 
\shape italic
seats
\shape default
 parameter, in the queue associated to the given position:
\end_layout

\begin_deeper
\begin_layout Itemize
If a taxi is found, the driver is notified: if they accept the ride, the
 TaxiDriver object is returned to the caller; else, the TaxiDriver is put
 at the end of the queue.
\end_layout

\end_deeper
\begin_layout Itemize
If no taxi driver is found, tries to look for a suitable taxi driver in
 the neighboring queues with the same procedure as above.
 If the search fails, an error is generated and the Ride manager reacts
 as described above.
 
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
requestToTaxi(TaxiDriver)
\series default
: prompt the Notification manager to notify the selected taxi driver with
 the data contained in the request.
 
\end_layout

\begin_layout Itemize

\series bold
addNewTaxiDriver(TaxiDriver, Position)
\series default
: called in reaction to a change in the availability status of a taxi driver,
 inserts the driver at the end of the queue.
\end_layout

\end_body
\end_document
